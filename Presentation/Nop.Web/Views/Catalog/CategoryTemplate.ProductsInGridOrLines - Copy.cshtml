@model CategoryModel
@{
    Layout = "~/Views/Shared/_ColumnsOne.cshtml";
    Html.AddTitleParts(!String.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);

    var canonicalUrlsEnabled = EngineContext.Current.Resolve<SeoSettings>().CanonicalUrlsEnabled;
    if (canonicalUrlsEnabled)
    {
        var categoryUrl = Url.RouteUrl("Category", new { SeName = Model.SeName }, this.Request.Url.Scheme);
        Html.AddCanonicalUrlParts(categoryUrl);
    }

    var breadcrumbDelimiter = EngineContext.Current.Resolve<CommonSettings>().BreadcrumbDelimiter;
}
@using Nop.Core.Domain.Common;
@using Nop.Core.Domain.Seo;
@using Nop.Core.Infrastructure;
@using Nop.Web.Models.Catalog;
@*category breadcrumb*@



<div class="container">
    <h2 class="cat-header-txt">@Model.Name.Replace("Root Category", "Root") </h2>

    <div class="row">
        <div class="col-md-6">
            @if (Model.DisplayCategoryBreadcrumb)
            {
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb top-bottom">
                        @foreach (var cat in Model.CategoryBreadcrumb)
                        {
                            var isLastCategory = cat.Id == Model.Id;
                            if (isLastCategory)
                            {
                                <li class="breadcrumb-item active" aria-current="page">@cat.Name.Replace("Root Category", "Root")</li>

                            }
                            else
                            {
                                <li class="breadcrumb-item"><a href="@Url.RouteUrl("Category", new { SeName = cat.SeName })">@cat.Name.Replace("Root Category", "Root")</a></li>
                            }
                        }

                    </ol>
                </nav>

                @Html.Widget("categorydetails_after_breadcrumb", Model.Id)
            }

        </div>
        <div class="col-md-6">
            <div class="row">
                <div class="col-md-4"> <span class="pull-right" style="margin-top:1.5em;font-weight: bold;">Sort By</span></div>
                <div class="col-md-8">
                    <div class="text__center">

                        <div class="cs-select cs-skin-elastic" tabindex="0">
                            <span class="cs-placeholder">Select an option</span><div class="cs-options"><ul><li data-option="" data-value="france"><span>Option A</span></li><li data-option="" data-value="brazil"><span>Option B</span></li><li data-option="" data-value="argentina"><span>Option C</span></li><li data-option="" data-value="south-africa"><span>Option D</span></li></ul></div><select class="cs-select cs-skin-elastic">
                                <option value="" disabled="" selected="">Select an option</option>
                                <option value="france">Option A</option>
                                <option value="brazil">Option B</option>
                                <option value="argentina">Option C</option>
                                <option value="south-africa">Option D</option>
                            </select>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @Html.Widget("categorydetails_top", Model.Id)


    @Html.Widget("categorydetails_before_subcategories", Model.Id)

    @if (Model.SubCategories.Any())
    {

        var items = Model.SubCategories.Take(4);
        var iterations = 0;
        <div class="row cat-row">
            @while (items.Count() > 0)
            {
                foreach (var item in items)
                {
                    <div class="col-md-3">
                        <div style="width:280px;height:280px;border:1px solid #ccc;">
                            <a href="@Url.RouteUrl("Category", new { SeName = item.SeName })" title="@item.PictureModel.Title">
                                <div style="width:100%;height:100%;background:url(@item.PictureModel.ImageUrl) center center no-repeat;">
                                </div>
                            </a>
                        </div>
                        <p class="cat-txt"><span>@item.Name</span></p>
                    </div>

                }
                iterations++;
                items = Model.SubCategories.Skip(4 * iterations).Take(4);
            }
        </div>
    }


    @if (Model.Products.Count > 0)
    {
        <div class="row">
            @Html.Partial("_CatalogSelectors", Model.PagingFilteringContext, new ViewDataDictionary())
        </div>
    }
    @if (Model.Products.Any())
    {
        var items = Model.Products.Take(4);
        var iterations = 0;
        <div class="product-list">
            <div class="row">
                @while (items.Count() > 0)
                {
                    foreach (var product in items)
                    {
                        @Html.Partial("_ProductBox", product)
                    }
                    iterations++;
                    items = Model.Products.Skip(4 * iterations).Take(4);
                }
            </div>
        </div>


        <div class="pager row" style="display :none">
            @Html.Pager(Model.PagingFilteringContext).QueryParam("pagenumber")
        </div>

        <script>
            var jscroll = $('.product-list').jscroll({
                loadingHtml: '<img src="/Content/DezineCorpImages/loader.gif"></img>',
                padding: 200,
                debug: true,
                autoTrigger: true,
                autoTriggerUntil: 30,
                nextSelector: 'li.next-page a',
                contentSelector: '.product-list',
                callback: function () {
                    $('.pager').hide();
                    // Remove handler from existing elements
                    $(".product-box").off();

                    // Re-add event handler for all matching elements
                    $(".product-box").on("click", GetScrollPos);

                }
            });
            var isPostBack = false;
            $(window).load(function () {
                if (localStorage.getItem('scrollPosTop') !== null) {
                    var scrollPos = parseInt(localStorage.getItem('scrollPosTop'));
                    $('html,body').animate({ scrollTop: scrollPos }, 1000);
                    localStorage.removeItem('scrollPosTop');

                }
            });

            $('.product-box').live('click', GetScrollPos);
            function GetScrollPos(event) {
                localStorage.removeItem('scrollPosTop');
                var pos = $(this).offset().top;
                localStorage.setItem('scrollPosTop', pos);
                console.log(pos);
            }

        </script>
    }



</div>



@if (false)
{
    var items = Model.Products.Take(3);
    var iterations = 0;
    <div class="product-list">
        <div class="row">
            @while (items.Count() > 0)
            {
                foreach (var product in items)
                {
                    @Html.Partial("_ProductBox", product)
                }
                iterations++;
                items = Model.Products.Skip(3 * iterations).Take(3);
            }
        </div>
        @*@{
                var pager = Html.Pager(Model.PagingFilteringContext).QueryParam("pagenumber");
            }*@
        @*@if (!pager.IsEmpty())
            {
                <div class="pager">
                    @pager
                </div>
            }*@


        <div class="pager row" style="display :none">
            @Html.Pager(Model.PagingFilteringContext).QueryParam("pagenumber")
        </div>
    </div>

    <script>
        var jscroll = $('.product-list').jscroll({
            loadingHtml: '<img src="/Content/DezineCorpImages/loader.gif"></img>',
            padding: 200,
            debug: true,
            autoTrigger: true,
            autoTriggerUntil: 30,
            nextSelector: 'li.next-page a',
            contentSelector: '.product-list',
            callback: function () {
                $('.pager').hide();
                // Remove handler from existing elements
                $(".product-box").off();

                // Re-add event handler for all matching elements
                $(".product-box").on("click", GetScrollPos);
                //if (localStorage.getItem('scrollPosTop') !== null) {
                //    var scrollPos = parseInt(localStorage.getItem('scrollPosTop'));
                //    $("html, body").animate({ scrollTop: scrollPos }, 1000);
                //    if (scrollPos <= window.document.body.scrollHeight) {
                //        localStorage.removeItem('scrollPosTop');
                //    }
                //}
            }
        });
        var isPostBack = false;
        $(window).load(function () {
            if (localStorage.getItem('scrollPosTop') !== null) {
                var scrollPos = parseInt(localStorage.getItem('scrollPosTop'));
                $('html,body').animate({ scrollTop: scrollPos }, 1000);
                //$(document).scrollTop(scrollPos);
                localStorage.removeItem('scrollPosTop');
                // event.preventDefault();
                //$("html, body").animate({ scrollTop: scrollPos }, fast);
            }
        });
        //$(document).ready(function (event) {
        //    console.log('root head 3');
        //    if (localStorage.getItem('scrollPosTop') !== null) {
        //        var scrollPos = parseInt(localStorage.getItem('scrollPosTop'));
        //        $("html, body").scrollTop(scrollPos);
        //        localStorage.removeItem('scrollPosTop');
        //       // event.preventDefault();
        //        //$("html, body").animate({ scrollTop: scrollPos }, fast);
        //    }
        //});
        $('.product-box').live('click', GetScrollPos);
        function GetScrollPos(event) {
            localStorage.removeItem('scrollPosTop');
            var pos = $(this).offset().top;
            localStorage.setItem('scrollPosTop', pos);
            console.log(pos);
        }
                                                                                            //function ScrollToPos() {
                                                                                            //    console.log('scroll ' + localStorage.getItem('scrollPosTop'));
                                                                                            //    if (localStorage.getItem('scrollPosTop') !== null) {
                                                                                            //        // var bodyHeigt = window.document.body.scrollHeight;
                                                                                            //        var scrollPos = parseInt(localStorage.getItem('scrollPosTop'));
                                                                                            //        console.log(window.document.body.scrollHeight);
                                                                                            //        console.log(scrollPos)
                                                                                            //        //while (window.document.body.scrollHeight < scrollPos) {
                                                                                            //            $("html, body").animate({ scrollTop: window.document.body.scrollHeight }, 2000);
                                                                                            //        //}
                                                                                            //        $("html, body").animate({ scrollTop: scrollPos }, 1000);

                                                                                            //        localStorage.removeItem('scrollPosTop');
                                                                                            //    }
                                                                                            //}
    </script>
}
@Html.Widget("categorydetails_bottom", Model.Id)

